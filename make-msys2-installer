#!/usr/bin/env bash

set -x
set -e

_thisdir="$(dirname $0)"
test "${_thisdir}" = "." && _thisdir=${PWD}
_ifwroot="${_thisdir}"/qt-ifw
_arch=$(uname -m)
_date=$(date +'%Y%m%d')
_dateqif=$(date +'%Y-%m-%d')
_version=${_date}
_filename=yaul-msys2-${_arch}-${_date}.exe
_filename2=yaul-msys2-base-${_arch}-${_date}.tar.xz
_log=/tmp/installer-${_arch}-${_date}.log
if [ "${_arch}" = "x86_64" ]; then
  _bitness=64
else
  _bitness=32
fi
_archivegen=/mingw${_bitness}/bin/archivegen.exe
_binarycreator=/mingw${_bitness}/bin/binarycreator.exe
_installerbase=/mingw${_bitness}/bin/installerbase.exe
_7z="/usr/bin/7z" # 7z is a script
_newmsysbase=/tmp/newmsys
_newmsys=${_newmsysbase}/msys"${_bitness}"

_archive_msys64_base="msys2-base-x86_64-20190524.tar.xz"

declare -a undo_commands

_exitcode=5

exit_with_undo() {
  for _cmd in ${undo_commands[@]}; do
    eval "${_cmd}" | tee -a ${_log}
  done
  exit ${_exitcode}
}

exit_cleanly() {
  _exitcode=$1; shift;
  local _message=$1; shift;
  echo "${_message}" | tee -a ${_log}
  exit_with_undo
}

download_file() {
    local _id=${1}
    local _file=${2}

    rm -r -f /tmp/cookies.txt

    local _data=$(/usr/bin/wget \
      --quiet \
      --save-cookies /tmp/cookies.txt \
      --keep-session-cookies \
      --no-check-certificate \
      'https://drive.google.com/uc?export=download&id='"${_id}" \
      -O- \
      | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')

    /usr/bin/wget --force-directories \
      --load-cookies /tmp/cookies.txt \
      "https://drive.google.com/uc?export=download&confirm=${_data}&id=${_id}" \
      -O "${_file}"

    rm -r -f /tmp/cookies.txt
}

do_copy_scripts() {
  # At some point, traverse through ${_newmsys}/etc/post-install/ and determine
  # the last number:
  #
  # local _last_number=`find . -type f -name "*.post" | \
  #   sort -n | \
  #   awk '/^\.\/[0-9][0-9]-.*\.post$/ {
  #          sub(/^\.\//,"");
  #          sub(/-.+\.post$/,"");
  #        }
  #        END { print }'`
  #
  # At this point, if _last_number is empty, then set to "01". Otherwise,
  # increment

  mkdir -p "${_newmsys}/etc/post-install"
  cp -v -f "${_thisdir}/scripts/install.sh" "${_newmsys}/etc/post-install/09-yaul-install.post"
}

do_copy_toolchain() {
  rm -r -f "${_newmsys}/opt/x-tools"
  mkdir -p "${_newmsys}/opt/x-tools"

  download_file "1hkQ6PKWDM29Xv0ZhJzUBRg0Xvz09UFMI" "${_newmsys}/opt/tool-chain.tar.bz2"

  eval "/usr/bin/tar mxvfjp \"${_newmsys}/opt/tool-chain.tar.bz2\" -C \"${_newmsys}/opt/x-tools\"" 2>&1 | tee -a ${_log}
}

do_seds() {
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|@DATE@|${_dateqif}|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|@VERSION@|${_version}|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" -or -name "installscript.js" \) -exec sed -i "s|@BITNESS@|${_bitness}|g" "{}" \;
  undo_commands+=("undo_seds")
}

undo_seds() {
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|<ReleaseDate>${_dateqif}<|<ReleaseDate>@DATE@<|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|<Version>${_version}<|<Version>@VERSION@<|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" -or -name "installscript.js" \) -exec sed -i "s|msys${_bitness}|msys@BITNESS@|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" -or -name "installscript.js" \) -exec sed -i "s|${_bitness}-bit|@BITNESS@-bit|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" -or -name "installscript.js" \) -exec sed -i "s|if (\"@BITNESS@-bit\" === \"@BITNESS@-bit\")|if (\"@BITNESS@-bit\" === \"32-bit\")|g" "{}" \;
}

create_archives() {
  # Collect paths to archive
  local _data="${_ifwroot}"/packages/com.msys2.root.base/data
  [ -d "${_data}" ] && rm -rf "${_data}"
  mkdir -p "${_data}"
  local _dirs=
  for curr_dir in /etc /opt /var /tmp /usr /mingw32 /mingw64 /msys2_shell.cmd /msys2.exe /mingw32.exe /mingw64.exe /msys2.ini /mingw32.ini /mingw64.ini /msys2.ico /autorebase.bat autorebasebase1st.bat; do
    if [ -d ${_newmsys}${curr_dir} ] || [ -f ${_newmsys}${curr_dir} ]; then
      _dirs="${_dirs} ${_newmsys}$curr_dir"
    fi
  done

  # Create qt-ifw/packages/com.msys2.root.base/data/msys64.7z file
  if [ -n "${_dirs}" ]; then
    local _compress_cmd="${_archivegen} ${_data}/msys${_bitness}.7z ${_dirs}"
    pushd / > /dev/null
      echo "Run: ${_compress_cmd} ..." | tee -a ${_log}
      eval "${_compress_cmd}" 2>&1 | tee -a ${_log}
      _result=$?
      if [ "${_result}" -eq "0" ]; then
            echo " archivegen succeeded. Created ${_data}/msys${_bitness}.7z" | tee -a ${_log}
      else
            exit_cleanly "3" "archivegen failed. See ${_log}"
      fi
    popd > /dev/null

    # Create msys2-base-@BITNESS@-YYYYMMDD.tar.xz
    pushd ${_newmsysbase} > /dev/null
      local _compress_cmd2="/usr/bin/tar --transform='s/:/_/g' --dereference --hard-dereference -cJf ${_thisdir}/${_filename2} msys${_bitness}"
      echo "Run: ${_compress_cmd2} ..." | tee -a ${_log}
      eval "${_compress_cmd2}" 2>&1 | tee -a ${_log}
      _result=$?
      if [ "${_result}" -eq "0" ]; then
            echo " tar succeeded. Created " | tee -a ${_log}
      else
            die "MSYS2 compressing fail. See ${_log}"
      fi
    popd > /dev/null
  fi
}

# Add -v to get more information.
make_installer() {
  eval "\"${_binarycreator}\" \
    -t \"${_installerbase}\" \
    -p \"${_ifwroot}/packages\" \
    -c \"${_ifwroot}/config/config.xml\" \
    --offline-only \
    \"${_filename}\" \
    -v"  | tee -a ${_log}
}

trap exit_with_undo 1 2 15

create_chroot_system() {
  [ -d ${_newmsysbase} ] && rm -rf ${_newmsysbase}
  mkdir -p "${_newmsys}"
  pushd "${_newmsys}" > /dev/null

  mkdir -p var/lib/pacman
  mkdir -p var/log
  mkdir -p tmp

  if [ ! -f "${_thisdir}/${_archive_msys64_base}" ]; then
    exit_cleanly "1" "failed to find '${_thisdir}/${_archive_msys64_base}' (newmsys2)"
  fi

  eval "/usr/bin/tar -mxvpf \"${_thisdir}/${_archive_msys64_base}\" -C \"${_newmsysbase}/\"" 2>&1 | tee -a ${_log}
  _result=$?
  if [ "${_result}" -ne "0" ]; then
    exit_cleanly "1" "failed to create newmsys2"
  fi

  popd > /dev/null
}

if [ ! -f "${_archivegen}" ]; then
  eval "pacman -S --noconfirm mingw${_bitness}/mingw-w64-${_arch}-qt-installer-framework-git" | tee -a ${_log}
fi

if [ ! -f "${_archivegen}" ]; then
  exit_cleanly "2" "installation of mingw${_bitness}/mingw-w64-${_arch}-qt-installer-framework-git failed. See ${_log}"
fi

if ! [ -f "${_7z}" ]; then
  eval "pacman -S --noconfirm msys/p7zip" | tee -a ${_log}
fi

if [ ! -f "${_7z}" ]; then
  exit_cleanly "2" "installation of p7zip failed. See ${_log}"
fi

if [ -f "${_log}" ]; then
  rm "${_log}"
fi

echo "Creating MSYS2 chroot system ${_newmsys}" | tee -a ${_log}
create_chroot_system

echo "Creating MSYS2 installer /tmp/${_filename}" | tee -a ${_log}
if [ -f "/tmp/${_filename}" ]; then
  rm -f "/tmp/${_filename}"
fi

do_copy_scripts
do_copy_toolchain
do_seds
create_archives
make_installer
exit_cleanly "0" "All done, see ${_filename}"
